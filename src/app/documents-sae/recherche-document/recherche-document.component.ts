import { AfterViewInit, ChangeDetectorRef, Component, EventEmitter, ViewChild } from '@angular/core';
import { Router } from '@angular/router';
import { Document } from 'src/app/models/document.model';
import { FrontalEnv } from 'src/app/models/frontal-env.model';
import { DocumentsServiceService } from 'src/app/services/documents-service.service';
import { EnvironnementsService } from 'src/app/services/environnements-service';
import {MatPaginator, MatPaginatorModule} from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { Metadata } from 'src/app/models/metadata';
import { MetadataService } from 'src/app/services/metadata.service';
import { SelectionModel } from '@angular/cdk/collections';
import { MetadonneesDto } from 'src/app/models/metadonnees-dto.model';

@Component({
  selector: 'app-recherche-document',
  templateUrl: './recherche-document.component.html',
  styleUrls: ['./recherche-document.component.scss']
})
export class RechercheDocumentComponent implements AfterViewInit {

  tabFrontal! : FrontalEnv[];
  selectedFrontal! : string;
  frontal! : FrontalEnv;
  requete! : string;
  documents! : Document[];
  metadatas! : Metadata[];
  metadonneesDto : MetadonneesDto[] = [];
  displayedColumns: string[] = ['id', 'NomFichier', 'Titre'];
  displayedColumnsMetadata: string[] = ['select', 'codeLong', 'description', 'libelle'];
  dataSource =  new MatTableDataSource<Document>;
  dataSourceDto =  new MatTableDataSource<MetadonneesDto>;
  allComplete: boolean = false;

  /********************************************* */
  metadatasSource = new MatTableDataSource<Metadata>;
  selection = new SelectionModel<Metadata>(true, []);
  /********************************************* */
  envChange : EventEmitter<FrontalEnv> = new EventEmitter();

  @ViewChild(MatPaginator) paginator!: MatPaginator;

  constructor(
    private router : Router, 
    private envService : EnvironnementsService, 
    private cdr : ChangeDetectorRef,
    private MetadataService: MetadataService){

      this.envService.getDocuments().subscribe( documents => {
        this.documents = documents
        documents.forEach(doc => {
          let docdto = new MetadonneesDto();
          docdto.id = doc.id;
          let metadonnes = doc.metadonnees;
          docdto.CodeOrganismeGestionnaire = metadonnes.CodeOrganismeGestionnaire;
          docdto.CodeRND = metadonnes.CodeRND;
          docdto.ContratDeService = metadonnes.ContratDeService;
          docdto.DateArchivage = metadonnes.DateArchivage;
          docdto.DateCreation = metadonnes.DateArchivage;
          docdto.Denomination = metadonnes.Denomination;
          docdto.IdGed = metadonnes.IdGed;
          docdto.NomFichier = metadonnes.NomFichier;
          docdto.TailleFichier = metadonnes.TailleFichier;
          docdto.Titre = metadonnes.Titre;
          this.metadonneesDto.push(docdto);
        });
        //console.log(this.documents);
        this.dataSource = new MatTableDataSource(documents);
        this.dataSourceDto = new MatTableDataSource(this.metadonneesDto);
        this.dataSource.paginator = this.paginator;
      }
      );
    }

  ngAfterViewInit() {
      this.dataSource.paginator = this.paginator;
      this.cdr.detectChanges();
  }

  ngOnInit(){
    this.envService.getAllFrontals().subscribe({
      next : frontals => this.tabFrontal = frontals,
      error : err => console.log(err)
    });


    this.envService.getDocuments().subscribe( documents => {
      this.documents = documents
      //console.log(this.documents);
      this.dataSource = new MatTableDataSource(this.documents);
    }
    ); 

    this.MetadataService.getMetadatas().subscribe( metadata => {
      this.metadatas = metadata
      this.metadatasSource = new MatTableDataSource(metadata);
    }
    );
    
  }

  navigate(path: string){
    this.router.navigate([path])
  }

  onSelectedChange(value: Event){
    let nomEnv = value + "";
    this.envService.getFrontalByIdWithError(nomEnv).subscribe(val => {
      this.frontal = val!;
      //console.log(this.frontal);
    }); 
  }

  onSearchDocument(value: Event){
    if(this.requete){

    } else {
      this.envService.searchDocuments(2).subscribe( documents => {
        this.documents = documents.slice(0,2)
        console.log(this.documents);
        this.dataSource = new MatTableDataSource(this.documents);
      }
      );
    }
  }

  updateAllComplete(event:any) {
    console.log(event.target);
    this.allComplete = this.metadatas != null && this.metadatas.every(t => {
      t.checked;
      if(t.checked===true){
        this.displayedColumns.push(t.codeLong)
      }});
  }

  checkAll(value: boolean){
    this.allComplete = value;
    this.metadatas.forEach(t => (t.checked = value));
  }

  someComplete(): boolean {
    return this.metadatas.filter(t => t.checked).length > 0 && !this.allComplete;
  }

  /*********************************************************************** */


   /** Whether the number of selected elements matches the total number of rows. */
   isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.metadatasSource.data.length;
    this.metadatasSource.data.find(row => {
      //console.log(this.selection.isSelected(row));
      if(this.selection.isSelected(row)){
        //console.log(this.selection.isSelected(row));
        if(this.displayedColumns.indexOf(row.codeLong) == -1){
          this.displayedColumns.push(row.codeLong);
        }
      } else if(!this.selection.isSelected(row)){
        if(this.displayedColumns.indexOf(row.codeLong) > -1){
          this.removeDocument(row.codeLong);
        }
      }
    });
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected() ?
        this.selection.clear() :
        this.metadatasSource.data.forEach(row => {
          this.selection.select(row)
          console.log(row);
        });
  }

  logSelection() {
    this.selection.selected.forEach(m => console.log(m.codeLong));
  }

  removeDocument(codeLong:string){
    this.displayedColumns.forEach( (item, index) => {
      if(item === codeLong) this.displayedColumns.splice(index,1);
    });
 }
}
