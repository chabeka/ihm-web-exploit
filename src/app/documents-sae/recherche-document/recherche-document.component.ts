import { AfterViewInit, ChangeDetectorRef, Component, EventEmitter, ViewChild } from '@angular/core';
import { Router } from '@angular/router';
import { Document } from 'src/app/models/document.model';
import { FrontalEnv } from 'src/app/models/frontal-env.model';
import { DocumentsServiceService } from 'src/app/services/documents-service.service';
import { EnvironnementsService } from 'src/app/services/environnements-service';
import {MatPaginator, MatPaginatorModule} from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';

@Component({
  selector: 'app-recherche-document',
  templateUrl: './recherche-document.component.html',
  styleUrls: ['./recherche-document.component.scss']
})
export class RechercheDocumentComponent implements AfterViewInit {

  tabFrontal! : FrontalEnv[];
  selectedFrontal! : string;
  frontal! : FrontalEnv;
  requete! : string;
  documents! : Document[];
  displayedColumns: string[] = ['identifiant', 'NomFichier', 'Titre'];
  dataSource =  new MatTableDataSource<Document>;

  envChange : EventEmitter<FrontalEnv> = new EventEmitter();

  @ViewChild(MatPaginator) paginator!: MatPaginator;

  constructor(
    private router : Router, 
    private envService : EnvironnementsService, private cdr : ChangeDetectorRef){

      this.envService.getDocuments().subscribe( documents => {
        this.documents = documents
        //console.log(this.documents);
        this.dataSource = new MatTableDataSource(documents);
        this.dataSource.paginator = this.paginator;
      }
      );
    }

  ngAfterViewInit() {
      this.dataSource.paginator = this.paginator;
      this.cdr.detectChanges();
  }

  ngOnInit(){
    this.envService.getAllFrontals().subscribe({
      next : frontals => this.tabFrontal = frontals
    });


    this.envService.getDocuments().subscribe( documents => {
      this.documents = documents
      //console.log(this.documents);
      this.dataSource = new MatTableDataSource(this.documents);
    }
    ); 
    
  }

  navigate(path: string){
    this.router.navigate([path])
  }

  onSelectedChange(value: Event){
    let nomEnv = value + "";
    this.envService.getFrontalByIdWithError(nomEnv).subscribe(val => {
      this.frontal = val!;
      //console.log(this.frontal);
    }); 
  }

  onSearchDocument(value: Event){
    if(this.requete){

    } else {
      this.envService.getDocuments().subscribe( documents => {
        this.documents = documents
        //console.log(this.documents);
      }
      );
    }
  }

  loadLessonsPage() {
    this.dataSource.loadLessons(
        "",
        '',
        'asc',
        this.paginator.pageIndex,
        this.paginator.pageSize);
  }
}
