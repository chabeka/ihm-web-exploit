import { Injectable } from '@angular/core';
import { InMemoryDbService } from 'angular-in-memory-web-api';
import { Environnement } from '../models/environnement.model';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, catchError, of, tap, throwError } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DocumentsServiceService{

  private documentsUrl = 'api/documents'; 

  constructor(private httpClient : HttpClient) { }

  getDocuments(): Observable<Environnement[]> {
    return this.httpClient.get<Environnement[]>(this.documentsUrl)
      .pipe(
        tap(data => console.log(JSON.stringify(data))),
        catchError(this.handleError<Environnement[]>('getHeroes', []))
      );
  }

  getDocument(nom: string): Observable<Environnement> {
    const url = `${this.documentsUrl}/${nom}`;
    return this.httpClient.get<Environnement>(url).pipe(
      tap(_ => console.log(`fetched hero id=${nom}`)),
      catchError(this.handleError<Environnement>(`getDocument id=${nom}`))
    );
  }

  updateDocument(env: Environnement): Observable<any> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });

    return this.httpClient.put(this.documentsUrl, env, { headers: headers }).pipe(
      tap(_ => console.log(`updated hero id=${env.id}`)),
      catchError(this.handleError<any>('updateDocument'))
    );
  }

  /************************************************************************************************/
      /* handler */
  /************************************************************************************************/
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {
  
      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead
  
      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }
}
