import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, catchError, of } from 'rxjs';
import { Metadata } from '../models/metadata';

@Injectable({
  providedIn: 'root'
})
export class MetadataService {

  httpOptions = {
    headers: new HttpHeaders({ 'Content-Type': 'application/json' })
  };

  private readonly metadatasUrl = 'api/metadata';
  
  constructor(private http : HttpClient){};


  /************************************************************************************************/
      /* Documents service */
  /************************************************************************************************/
  
  getMetadatas(): Observable<Metadata[]> {
    return this.http.get<Metadata[]>(this.metadatasUrl)
      .pipe(
        //tap(data => console.log(JSON.stringify(data))),
        catchError(this.handleError<Metadata[]>('getMetadata', []))
      );
  }

  /************************************************************************************************/
      /* handler */
  /************************************************************************************************/
  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {
  
      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead
  
      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }
}
